<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
sPause = noone;

keyOrder = ds_list_create();
ds_list_add(keyOrder, UP, DOWN, LEFT, RIGHT);

music = true;
bgm = noone;
sound = true;
DIASPDmult = 1;
controls = "^&lt;v&gt;ZXC";

if(file_exists(working_directory + "/game")) {
    ini_open(working_directory + "/game");
    sound = ini_read_real('game', 'sound', true);
    music = ini_read_real('game', 'music', true);
    DIASPDmult = ini_read_real('game', 'speed', 1);
    controls = ini_read_string('game', 'controls', controls);
}

playTime = 0;

waterTimer = room_speed;
shake = 0;

randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update keyOrder
if(input_check_pressed(UP)) {
    var ind = ds_list_find_index(keyOrder, UP);
    keyOrder[| ind] = keyOrder[| 0];
    keyOrder[| 0] = UP;
}
if(input_check_pressed(DOWN)) {
    var ind = ds_list_find_index(keyOrder, DOWN);
    keyOrder[| ind] = keyOrder[| 0];
    keyOrder[| 0] = DOWN;
}
if(input_check_pressed(RIGHT)) {
    var ind = ds_list_find_index(keyOrder, RIGHT);
    keyOrder[| ind] = keyOrder[| 0];
    keyOrder[| 0] = RIGHT;
}
if(input_check_pressed(LEFT)) {
    var ind = ds_list_find_index(keyOrder, LEFT);
    keyOrder[| ind] = keyOrder[| 0];
    keyOrder[| 0] = LEFT;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Count play time
playTime++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open the pause menu
if( input_check_pressed(MENU) &amp;&amp; 
    !sprite_exists(sPause) &amp;&amp; 
    !StoryController.cutscene &amp;&amp; 
    room &gt; rMenu &amp;&amp; 
    !instance_exists(TransitionController) &amp;&amp;
    !instance_exists(PauseMenu))
{    
    pause();
    input_clear(MENU);
    instance_create(0, 0, PauseMenu);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle water tiles
if(room == rWater) {
    waterTimer--;
    var tiles = tile_get_ids_at_depth(100000);
    for(var i = 0; i &lt; array_length_1d(tiles); i++) {
        tile_set_region(    tiles[i], 
                            tile_get_left(tiles[i]) % 64 + 64 * floor(waterTimer / (room_speed / 3)), 
                            tile_get_top(tiles[i]),
                            tile_get_width(tiles[i]),
                            tile_get_height(tiles[i]) );
    }
    if(!waterTimer) {
        waterTimer = room_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Views
view_enabled = true;
view_visible[0] = true;
if(os_browser == browser_not_a_browser) {
    view_wview[0] = display_get_width() / 2;
    view_hview[0] = display_get_height() / 2;
    view_xport[0] = 0;
    view_yport[0] = 0;
    view_wport[0] = display_get_width();
    view_hport[0] = display_get_height();
    if(view_wview[0] != surface_get_width(application_surface) || view_hview[0] != surface_get_height(application_surface)) {
        surface_resize(application_surface, view_wview[0], view_hview[0]);
    }
    window_set_fullscreen(true);
} else {
    view_wview[0] = window_get_width();
    view_hview[0] = window_get_height();
    view_xport[0] = 0;
    view_yport[0] = 0;
    view_wport[0] = window_get_width();
    view_hport[0] = window_get_height();
    if(view_wview[0] != surface_get_width(application_surface) || view_hview[0] != surface_get_height(application_surface)) {
        surface_resize(application_surface, view_wview[0], view_hview[0]);
    }
}

if(room_width &gt; view_wview[0] || room_height &gt; view_hview[0]) {
    if(instance_exists(Player)) {
        view_object[0] = Player;
        view_hborder[0] = (view_wview[0] / 2);
        view_hspeed[0] = -(room_width &gt; view_wview[0]);
        view_vborder[0] = (view_hview[0] / 2);
        view_hspeed[0] = -(room_height &gt; view_hview[0]);        
    }
}
if(room_width &lt; view_wview[0]) {
    view_xview[0] = (room_width / 2) - (view_wview[0] / 2);
    view_hspeed[0] = 0;
}
if(room_height &lt; view_hview[0]) {
    view_yview[0] = (room_height / 2) - (view_hview[0] / 2);
    view_vspeed[0] = 0;
}

//Menu view positioning is centred
if(room == rMenu) {
    view_xview[0] = room_width / 2 - view_wview[0] / 2;
    view_yview[0] = room_height / 2 - view_hview[0] / 2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake
if(--shake &gt; 0) {
    view_xport[0] = irandom(20);
    view_yport[0] = irandom(20);
} else {
    view_xport[0] = 0;
    view_yport[0] = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return to menu from end room with any button
if(room == rEnd &amp;&amp; keyboard_check_pressed(vk_anykey)) {
    room_goto(rMenu);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music
if(music) {
    if(!audio_is_playing(mMusic)) {
        bgm = audio_play_sound(mMusic, 0, true);
    }
    if(room == rHome) {
        //Quieter in house for effect
        audio_sound_gain(bgm, 0.6, 0);
    } else {
        audio_sound_gain(bgm, 1, 0);
    }
} else {
    audio_stop_sound(bgm);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shake when starting the game
if(room == rHome &amp;&amp; StoryController.state[0] == 0 &amp;&amp; StoryController.progress[0] == 0) {
    shake = room_speed * 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the pause sprite if the game is paused
if(sprite_exists(sPause)) {
    draw_sprite(sPause, 0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw end screen
if(room == rEnd) {
    draw_set_color(c_white);
    draw_set_valign(fa_bottom);
    draw_text(32, view_yview[0] + view_hview[0] - 32, "The end.");
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
